module(
    name = "example_bzlmod",
    version = "0.0.0",
    compatibility_level = 1,
)

bazel_dep(name = "bazel_skylib", version = "1.4.1")
bazel_dep(name = "rules_python", version = "0.0.0")
local_path_override(
    module_name = "rules_python",
    path = "../..",
)

# We next initialize the python toolchain using the extension.
# You can set different Python versions in this block.
python = use_extension("@rules_python//python/extensions:python.bzl", "python")
python.toolchain(
    configure_coverage_tool = True,
    # Only set when you have mulitple toolchain versions.
    is_default = True,
    python_version = "3.9",
)

# We are also using a second version of Python in this project.
# Typically you will only need a single version of Python, but
# If you need a different vesion we support more than one.
# Note: we do not supporting using multiple pip extensions, this is
# work in progress.
python.toolchain(
    configure_coverage_tool = True,
    python_version = "3.10",
)

# You only need to load this repositories if you are using multiple Python versions.
# See the tests folder for various examples on using multiple Python versions.
# The names "python_3_9" and "python_3_10" are autmatically created by the repo
# rules based on the python_versions.
use_repo(python, "python_3_10", "python_3_9", "python_aliases")

whl_mods = use_extension("@rules_python//python/extensions:whl_mods.bzl", "whl_mods")
whl_mods.create(
    name = "whl_mods_hub",
    whl_name = "requests",
    hub_name = "whl_mods_hub",
    additive_build_content = """\
load("@bazel_skylib//rules:write_file.bzl", "write_file")
write_file(
    name = "generated_file",
    out = "generated_file.txt",
    content = ["Hello world from requests"],
)
""",
    data = [":generated_file"],
)
whl_mods.create(
    name = "whl_mods_hub",
    whl_name = "wheel", 
    hub_name = "whl_mods_hub",
    additive_build_content = """\
load("@bazel_skylib//rules:write_file.bzl", "write_file")
write_file(
    name = "generated_file",
    out = "generated_file.txt",
    content = ["Hello world from build content file"],
)
""",
    copy_executables = {
        ":data/copy_executable.py": "copied_content/executable.py",
    },
    copy_files = {
        ":data/copy_file.txt": "copied_content/file.txt",
    },
    data = [":generated_file"],
    data_exclude_glob = ["site-packages/*.dist-info/WHEEL"],
)
use_repo(whl_mods, "whl_mods_hub")

pip = use_extension("@rules_python//python/extensions:pip.bzl", "pip")

# For each pip setup we call pip.parse.  We can pass in various options
# but typically we are passing in a requirements and an interpreter.
# If you provide the python_version we will attempt to determine
# the interpreter target automatically. Otherwise use python_interpreter_target
# to override the lookup.
pip.parse(
    hub_name = "pip",
    python_version = "3.9",
    annotations = {
        "wheel" : "@whl_mods_hub//:wheel.json",
        "requests" : "@whl_mods_hub//:requests.json",
    },
    requirements_lock = "//:requirements_lock_3_9.txt",
    requirements_windows = "//:requirements_windows_3_9.txt",
)
pip.parse(
    hub_name = "pip",
    python_version = "3.10",
    annotations = {
        "wheel" : "@whl_mods_hub//:wheel.json",
        "requests" : "@whl_mods_hub//:requests.json",
    },
    requirements_lock = "//:requirements_lock_3_10.txt",
    requirements_windows = "//:requirements_windows_3_10.txt",
)

# we use the pip_39 repo because entry points are not yet supported.
use_repo(pip, "pip", "pip_39")

bazel_dep(name = "other_module", version = "", repo_name = "our_other_module")
local_path_override(
    module_name = "other_module",
    path = "other_module",
)
